properties([gitLabConnection('Gitlab')])

node {

    println "============================"
    println "Branche: " + env.BRANCH_NAME
    println "============================"

    // = Checkout
    stage('Checkout') {
        deleteDir()
        checkout scm  
        //env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short origin/'+env.BRANCH_NAME).trim()
        //env.GIT_AUTHOR = sh(returnStdout: true, script: 'git --no-pager show -s --format=\'%an\' origin/'+env.BRANCH_NAME).trim()
        //env.GIT_COMMIT_MESSAGE = sh(returnStdout: true, script: 'git log --format=format:%s -1').trim()
    }
    
    gitlabCommitStatus('Build')
    {
        stage('Build') {
            sh 'mvn clean compile package -Dmaven.test.skip=true'
        }
    }
    
    gitlabCommitStatus('Test')
    {
        stage('Test') {
            sh 'mvn test'
        }
    }
    
    gitlabCommitStatus('dependencyCheck')
    {
    	stage('dependencyCheck') {
            if (env.BRANCH_NAME == 'demo') {
                dependencyCheck additionalArguments: '--out="target" --scan="target" --format="HTML"', odcInstallation: 'DepCheck'
            }
	    }
    }
    
    gitlabCommitStatus('Quality')
    {
    	stage('SonarQube') {
		    withSonarQubeEnv() {
                sh "mvn sonar:sonar -Dsonar.branch.name=${env.BRANCH_NAME}"
                if('MERGE' == env.gitlabActionType){
                    sh "mvn sonar:sonar -Dsonar.pullrequest.branch=${env.gitlabSourceBranch} -Dsonar.pullrequest.key=${env.gitlabMergeRequestIid} -Dsonar.pullrequest.base=${env.gitlabTargetBranch}"
                }
		    }
	    }
    }
    
    // = Package
    gitlabCommitStatus('Package')
    {
        stage('Package') {
            pom = readMavenPom file: 'pom.xml'
            //Maven Package
            if(!pom.version.contains("-SNAPSHOT")) {
                sh 'mvn package deploy -Dmaven.test.skip=true  -DaltDeploymentRepository=culture::default::https://pic-culture.actontechnology.com/nexus/repository/culture-release/'
            } else if(env.BRANCH_NAME.startsWith('demo') || env.BRANCH_NAME.startsWith('develop')) {
                sh 'mvn package deploy -Dmaven.test.skip=true  -DaltDeploymentRepository=culture::default::https://pic-culture.actontechnology.com/nexus/repository/culture-snapshot/'
            }
        }
    }
    
    // = Deploiement
    gitlabCommitStatus('Deploy')
    {
        stage('Deploy'){
        pom = readMavenPom file: 'pom.xml'
        }
    }
    
}

